--> "\n" is low level operation that directly moves the cursor to the beginnig of the next line in the output.

--> std::end; not only adds a newline character but also flushes the output buffer. flushing the buffer can be a more constly operation in term of performance.

--> By adding using namespace std; at the beginning of your program, you're telling the compiler that you want to use all the names from the std namespace without explicitly specifying std:: each time. T
-> "using namespace std;"

****************************
--> #include<bits/stdc++.h>
****************************

--> nested switch are possible.

--> The time complexity for this code will be nothing but the number of steps, this code will take to be executed. So, if we write this in terms of Big O notation, it will be like O(no. of steps).

--> Here come the three rules, that we are going to follow while calculating the time complexity:
- We will always calculate the time complexity for the - worst-case scenario.
- We will avoid including the constant terms.
- We will also avoid the lower values.

**************
*** STL *********
**************

-> What is an unordered set?
- An unordered set in STL is a container that stores unique elements in no particular order. Every operation on an unordered set takes O(1) complexity in the average case and takes O(n) in the worst case.
- unordered_set<object_type> s;
- s.insert(x);
- s.begin();
- s.end();
- s.count(element);
- s.clear();
- if(s.find(element)!=s.end())
- s.erase(it); -> give the iterator as parameter ex. s.begin() + 2
- s.size();
- s.empty();

- cbegin() – it refers to the first element of the unordered set.
- cend() – it refers to the theoretical element after the last element of the unordered set.
- bucket_size() - gives the total number of elements present in a specific bucket in an unordered set.
- emplace() - to insert an element in the unordered set.
- max_size() - the maximum elements an unordered_set can hold.
- max_bucket_count() - to check the maximum number of buckets an unordered set can hold.


-> What is a Vector?
- Vectors in STL are basically dynamic arrays that have the ability to change size whenever elements are added or deleted from them. Vector elements can be easily accessed and traversed using iterators. A vector stores elements in contiguous memory locations.
- vector<object_type> v;
- auto it = v.begin();
- v.push_back(x);
- v.pop_back();
- v.insert(it, x); -> it is iterator
- v.erase(it); -> it is iterator
- v.size();
- v.front();
- v.back();
- v.empty();
- v.clear();
- v.capacity();

- cbegin() - it refers to the first element of the vector.
- cend() - it refers to the theoretical element after the last element of the vector.
- rbegin() - it points to the last element of the vector.
- rend() - it points to the theoretical element before the first element of the vector.
- crbegin() - it refers to the last element of the vector.
- crend() - it refers to the theoretical element before the first element of the vector.
- max_size() - returns the maximum size the vector can hold.
- capacity() - it returns the current capacity of the vector.


-> What is a set?
- A set in STL is a container that stores unique elements in a particular order. Every operation on a set takes O(1) complexity in the average case and takes O(n) in the worst case.
- set<object_type> s;
- s.insert(x);
- s.begin(); -> return iterator
- s.end(); -> return iterator
- s.count(element);  
- s.clear();
- if(s.find(element)!=s.end());
- s.erase(it); -> give the iterator as parameter ex. s.begin() + 2
- s.size();
- s.empty();


-> reverse sort
- sort(arr.rbegin(),arr.rend());

-> n = remove(arr, arr + n, maxi) - arr;
- The line of code you're using is an efficient way to remove all occurrences of a specific element (maxi in this case) from an array, and it updates the size of the array after removal.

-> int n = sizeof(arr) / sizeof(arr[0]);
- for find the size of array

*******************************************************
-> rotate(nums.begin(), nums.begin() + x, nums.end());
- rotate the array for x position in left direction.

__ or __

reverse(nums.begin(), nums.end());
reverse(nums.begin(), nums.begin() + k);
reverse(nums.begin() + k, nums.end());
*******************************************************


-> Remove duplicates
auto last = unique(ans.begin(), ans.end());
ans.erase(last, ans.end());


-> kadane's algorithm, maximum subarray sum

-> next permutation syntex
- next_permutation(nums.begin(), nums.end());

-> for resize of vector<vector<data_type>> ans;
-  ans[x].resize(y);
- x : row number
- y : size of that row

-> cast the data_type one to another ex. int to long long
- static_cast<data_type>